/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../..";
import * as DevRevBeta from "../../../../../api";
import * as core from "../../../../../core";

export const ConversationsUpdateRequest: core.serialization.Schema<
    serializers.ConversationsUpdateRequest.Raw,
    DevRevBeta.ConversationsUpdateRequest
> = core.serialization.object({
    appliesToParts: core.serialization.property(
        "applies_to_parts",
        core.serialization
            .lazyObject(async () => (await import("../../../..")).ConversationsUpdateRequestAppliesToParts)
            .optional()
    ),
    description: core.serialization.string().optional(),
    group: core.serialization.string().optional(),
    id: core.serialization.string(),
    stage: core.serialization.lazyObject(async () => (await import("../../../..")).StageUpdate).optional(),
    status: core.serialization.string().optional(),
    tags: core.serialization
        .lazyObject(async () => (await import("../../../..")).ConversationsUpdateRequestTags)
        .optional(),
    title: core.serialization.string().optional(),
});

export declare namespace ConversationsUpdateRequest {
    interface Raw {
        applies_to_parts?: serializers.ConversationsUpdateRequestAppliesToParts.Raw | null;
        description?: string | null;
        group?: string | null;
        id: string;
        stage?: serializers.StageUpdate.Raw | null;
        status?: string | null;
        tags?: serializers.ConversationsUpdateRequestTags.Raw | null;
        title?: string | null;
    }
}
