/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as DevRevBeta from "../../api";
import * as core from "../../core";

export const Conversation: core.serialization.ObjectSchema<serializers.Conversation.Raw, DevRevBeta.Conversation> =
    core.serialization.object({
        description: core.serialization.string().optional(),
        group: core.serialization.lazyObject(async () => (await import("..")).GroupSummary).optional(),
        messages: core.serialization
            .list(core.serialization.lazy(async () => (await import("..")).TimelineEntry))
            .optional(),
        ownedBy: core.serialization.property(
            "owned_by",
            core.serialization.list(core.serialization.lazy(async () => (await import("..")).UserSummary)).optional()
        ),
        stage: core.serialization.lazyObject(async () => (await import("..")).Stage).optional(),
        title: core.serialization.string().optional(),
    });

export declare namespace Conversation {
    interface Raw {
        description?: string | null;
        group?: serializers.GroupSummary.Raw | null;
        messages?: serializers.TimelineEntry.Raw[] | null;
        owned_by?: serializers.UserSummary.Raw[] | null;
        stage?: serializers.Stage.Raw | null;
        title?: string | null;
    }
}
