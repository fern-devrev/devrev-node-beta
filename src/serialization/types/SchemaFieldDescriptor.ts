/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as DevRevBeta from "../../api";
import * as core from "../../core";

export const SchemaFieldDescriptor: core.serialization.Schema<
    serializers.SchemaFieldDescriptor.Raw,
    DevRevBeta.SchemaFieldDescriptor
> = core.serialization
    .union(core.serialization.discriminant("fieldType", "field_type"), {
        array: core.serialization.object({
            value: core.serialization.lazy(async () => (await import("..")).SchemaFieldDescriptorArrayType),
        }),
        bool: core.serialization.lazyObject(async () => (await import("..")).SchemaBoolFieldDescriptor),
        composite: core.serialization.lazyObject(async () => (await import("..")).SchemaCompositeFieldDescriptor),
        double: core.serialization.lazyObject(async () => (await import("..")).SchemaDoubleFieldDescriptor),
        enum: core.serialization.lazyObject(async () => (await import("..")).SchemaEnumFieldDescriptor),
        id: core.serialization.lazyObject(async () => (await import("..")).SchemaIdFieldDescriptor),
        int: core.serialization.lazyObject(async () => (await import("..")).SchemaIntFieldDescriptor),
        rich_text: core.serialization.lazyObject(async () => (await import("..")).SchemaRichTextFieldDescriptor),
        text: core.serialization.lazyObject(async () => (await import("..")).SchemaTextFieldDescriptor),
        timestamp: core.serialization.lazyObject(async () => (await import("..")).SchemaTimestampFieldDescriptor),
        tokens: core.serialization.lazyObject(async () => (await import("..")).SchemaTokensFieldDescriptor),
    })
    .transform<DevRevBeta.SchemaFieldDescriptor>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace SchemaFieldDescriptor {
    type Raw =
        | SchemaFieldDescriptor.Array
        | SchemaFieldDescriptor.Bool
        | SchemaFieldDescriptor.Composite
        | SchemaFieldDescriptor.Double
        | SchemaFieldDescriptor.Enum
        | SchemaFieldDescriptor.Id
        | SchemaFieldDescriptor.Int
        | SchemaFieldDescriptor.RichText
        | SchemaFieldDescriptor.Text
        | SchemaFieldDescriptor.Timestamp
        | SchemaFieldDescriptor.Tokens;

    interface Array {
        field_type: "array";
        value: serializers.SchemaFieldDescriptorArrayType.Raw;
    }

    interface Bool extends serializers.SchemaBoolFieldDescriptor.Raw {
        field_type: "bool";
    }

    interface Composite extends serializers.SchemaCompositeFieldDescriptor.Raw {
        field_type: "composite";
    }

    interface Double extends serializers.SchemaDoubleFieldDescriptor.Raw {
        field_type: "double";
    }

    interface Enum extends serializers.SchemaEnumFieldDescriptor.Raw {
        field_type: "enum";
    }

    interface Id extends serializers.SchemaIdFieldDescriptor.Raw {
        field_type: "id";
    }

    interface Int extends serializers.SchemaIntFieldDescriptor.Raw {
        field_type: "int";
    }

    interface RichText extends serializers.SchemaRichTextFieldDescriptor.Raw {
        field_type: "rich_text";
    }

    interface Text extends serializers.SchemaTextFieldDescriptor.Raw {
        field_type: "text";
    }

    interface Timestamp extends serializers.SchemaTimestampFieldDescriptor.Raw {
        field_type: "timestamp";
    }

    interface Tokens extends serializers.SchemaTokensFieldDescriptor.Raw {
        field_type: "tokens";
    }
}
