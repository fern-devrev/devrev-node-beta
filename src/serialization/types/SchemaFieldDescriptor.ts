/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../core";
import * as serializers from "..";
import * as DevRevBeta from "../../api";

const _Base = core.serialization.object({
    fieldType: core.serialization.property(
        "field_type",
        core.serialization.lazy(async () => (await import("..")).SchemaFieldDescriptorFieldType)
    ),
});
export const SchemaFieldDescriptor: core.serialization.Schema<
    serializers.SchemaFieldDescriptor.Raw,
    DevRevBeta.SchemaFieldDescriptor
> = core.serialization
    .union("type", {
        array: core.serialization
            .object({
                value: core.serialization.lazy(async () => (await import("..")).SchemaFieldDescriptorArrayType),
            })
            .extend(_Base),
        bool: core.serialization.lazyObject(async () => (await import("..")).SchemaBoolFieldDescriptor).extend(_Base),
        composite: core.serialization
            .lazyObject(async () => (await import("..")).SchemaCompositeFieldDescriptor)
            .extend(_Base),
        double: core.serialization
            .lazyObject(async () => (await import("..")).SchemaDoubleFieldDescriptor)
            .extend(_Base),
        enum: core.serialization.lazyObject(async () => (await import("..")).SchemaEnumFieldDescriptor).extend(_Base),
        id: core.serialization.lazyObject(async () => (await import("..")).SchemaIdFieldDescriptor).extend(_Base),
        int: core.serialization.lazyObject(async () => (await import("..")).SchemaIntFieldDescriptor).extend(_Base),
        rich_text: core.serialization
            .lazyObject(async () => (await import("..")).SchemaRichTextFieldDescriptor)
            .extend(_Base),
        text: core.serialization.lazyObject(async () => (await import("..")).SchemaTextFieldDescriptor).extend(_Base),
        timestamp: core.serialization
            .lazyObject(async () => (await import("..")).SchemaTimestampFieldDescriptor)
            .extend(_Base),
        tokens: core.serialization
            .lazyObject(async () => (await import("..")).SchemaTokensFieldDescriptor)
            .extend(_Base),
    })
    .transform<DevRevBeta.SchemaFieldDescriptor>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace SchemaFieldDescriptor {
    type Raw =
        | SchemaFieldDescriptor.Array
        | SchemaFieldDescriptor.Bool
        | SchemaFieldDescriptor.Composite
        | SchemaFieldDescriptor.Double
        | SchemaFieldDescriptor.Enum
        | SchemaFieldDescriptor.Id
        | SchemaFieldDescriptor.Int
        | SchemaFieldDescriptor.RichText
        | SchemaFieldDescriptor.Text
        | SchemaFieldDescriptor.Timestamp
        | SchemaFieldDescriptor.Tokens;

    interface Array extends _Base {
        type: "array";
        value: serializers.SchemaFieldDescriptorArrayType.Raw;
    }

    interface Bool extends _Base, serializers.SchemaBoolFieldDescriptor.Raw {
        type: "bool";
    }

    interface Composite extends _Base, serializers.SchemaCompositeFieldDescriptor.Raw {
        type: "composite";
    }

    interface Double extends _Base, serializers.SchemaDoubleFieldDescriptor.Raw {
        type: "double";
    }

    interface Enum extends _Base, serializers.SchemaEnumFieldDescriptor.Raw {
        type: "enum";
    }

    interface Id extends _Base, serializers.SchemaIdFieldDescriptor.Raw {
        type: "id";
    }

    interface Int extends _Base, serializers.SchemaIntFieldDescriptor.Raw {
        type: "int";
    }

    interface RichText extends _Base, serializers.SchemaRichTextFieldDescriptor.Raw {
        type: "rich_text";
    }

    interface Text extends _Base, serializers.SchemaTextFieldDescriptor.Raw {
        type: "text";
    }

    interface Timestamp extends _Base, serializers.SchemaTimestampFieldDescriptor.Raw {
        type: "timestamp";
    }

    interface Tokens extends _Base, serializers.SchemaTokensFieldDescriptor.Raw {
        type: "tokens";
    }

    interface _Base {
        field_type: serializers.SchemaFieldDescriptorFieldType.Raw;
    }
}
