/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as DevRevBeta from "../../api";
import * as core from "../../core";

export const SchemaFieldDescriptorArrayType: core.serialization.Schema<
    serializers.SchemaFieldDescriptorArrayType.Raw,
    DevRevBeta.SchemaFieldDescriptorArrayType
> = core.serialization
    .union("type", {
        bool: core.serialization.lazyObject(async () => (await import("..")).SchemaBoolListFieldDescriptor),
        composite: core.serialization.lazyObject(async () => (await import("..")).SchemaCompositeListFieldDescriptor),
        double: core.serialization.lazyObject(async () => (await import("..")).SchemaDoubleListFieldDescriptor),
        enum: core.serialization.lazyObject(async () => (await import("..")).SchemaEnumListFieldDescriptor),
        id: core.serialization.lazyObject(async () => (await import("..")).SchemaIdListFieldDescriptor),
        int: core.serialization.lazyObject(async () => (await import("..")).SchemaIntListFieldDescriptor),
        rich_text: core.serialization.lazyObject(async () => (await import("..")).SchemaRichTextListFieldDescriptor),
        text: core.serialization.lazyObject(async () => (await import("..")).SchemaTextListFieldDescriptor),
        timestamp: core.serialization.lazyObject(async () => (await import("..")).SchemaTimestampListFieldDescriptor),
        tokens: core.serialization.lazyObject(async () => (await import("..")).SchemaTokensListFieldDescriptor),
    })
    .transform<DevRevBeta.SchemaFieldDescriptorArrayType>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace SchemaFieldDescriptorArrayType {
    type Raw =
        | SchemaFieldDescriptorArrayType.Bool
        | SchemaFieldDescriptorArrayType.Composite
        | SchemaFieldDescriptorArrayType.Double
        | SchemaFieldDescriptorArrayType.Enum
        | SchemaFieldDescriptorArrayType.Id
        | SchemaFieldDescriptorArrayType.Int
        | SchemaFieldDescriptorArrayType.RichText
        | SchemaFieldDescriptorArrayType.Text
        | SchemaFieldDescriptorArrayType.Timestamp
        | SchemaFieldDescriptorArrayType.Tokens;

    interface Bool extends serializers.SchemaBoolListFieldDescriptor.Raw {
        type: "bool";
    }

    interface Composite extends serializers.SchemaCompositeListFieldDescriptor.Raw {
        type: "composite";
    }

    interface Double extends serializers.SchemaDoubleListFieldDescriptor.Raw {
        type: "double";
    }

    interface Enum extends serializers.SchemaEnumListFieldDescriptor.Raw {
        type: "enum";
    }

    interface Id extends serializers.SchemaIdListFieldDescriptor.Raw {
        type: "id";
    }

    interface Int extends serializers.SchemaIntListFieldDescriptor.Raw {
        type: "int";
    }

    interface RichText extends serializers.SchemaRichTextListFieldDescriptor.Raw {
        type: "rich_text";
    }

    interface Text extends serializers.SchemaTextListFieldDescriptor.Raw {
        type: "text";
    }

    interface Timestamp extends serializers.SchemaTimestampListFieldDescriptor.Raw {
        type: "timestamp";
    }

    interface Tokens extends serializers.SchemaTokensListFieldDescriptor.Raw {
        type: "tokens";
    }
}
