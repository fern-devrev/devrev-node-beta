/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as DevRevBeta from "../../..";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";
import URLSearchParams from "@ungap/url-search-params";

export declare namespace RevUsers {
    interface Options {
        environment?: environments.DevRevBetaEnvironment | string;
        apiKey: core.Supplier<string>;
    }
}

export class RevUsers {
    constructor(protected readonly options: RevUsers.Options) {}

    public async create(request: DevRevBeta.RevUsersCreateRequest): Promise<DevRevBeta.RevUsersCreateResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.DevRevBetaEnvironment.Default, "rev-users.create"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            body: await serializers.RevUsersCreateRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.RevUsersCreateResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.DevRevBetaError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevBetaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevBetaTimeoutError();
            case "unknown":
                throw new errors.DevRevBetaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async delete(request: DevRevBeta.RevUsersDeleteRequest): Promise<DevRevBeta.RevUsersDeleteResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.DevRevBetaEnvironment.Default, "rev-users.delete"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            body: await serializers.RevUsersDeleteRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.RevUsersDeleteResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.DevRevBetaError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevBetaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevBetaTimeoutError();
            case "unknown":
                throw new errors.DevRevBetaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async get(request: DevRevBeta.RevUsersGetRequest): Promise<DevRevBeta.RevUsersGetResponse> {
        const { id } = request;
        const _queryParams = new URLSearchParams();
        _queryParams.append("id", id);
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.DevRevBetaEnvironment.Default, "rev-users.get"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.RevUsersGetResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.DevRevBetaError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevBetaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevBetaTimeoutError();
            case "unknown":
                throw new errors.DevRevBetaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async linkRevUserToRevOrg(
        request: DevRevBeta.LinkRevUserToRevOrgRequest
    ): Promise<DevRevBeta.LinkRevUserToRevOrgResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.DevRevBetaEnvironment.Default, "rev-users.link"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            body: await serializers.LinkRevUserToRevOrgRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.LinkRevUserToRevOrgResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.DevRevBetaError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevBetaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevBetaTimeoutError();
            case "unknown":
                throw new errors.DevRevBetaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async list(request: DevRevBeta.RevUsersListRequest = {}): Promise<DevRevBeta.RevUsersListResponse> {
        const {
            createdBy,
            createdDateAfter,
            createdDateBefore,
            cursor,
            email,
            externalRef,
            limit,
            mode,
            modifiedDateAfter,
            modifiedDateBefore,
            revOrg,
            sortBy,
        } = request;
        const _queryParams = new URLSearchParams();
        if (createdBy != null) {
            if (Array.isArray(createdBy)) {
                for (const _item of createdBy) {
                    _queryParams.append("created_by", _item);
                }
            } else {
                _queryParams.append("created_by", createdBy);
            }
        }

        if (createdDateAfter != null) {
            _queryParams.append("created_date.after", createdDateAfter);
        }

        if (createdDateBefore != null) {
            _queryParams.append("created_date.before", createdDateBefore);
        }

        if (cursor != null) {
            _queryParams.append("cursor", cursor);
        }

        if (email != null) {
            if (Array.isArray(email)) {
                for (const _item of email) {
                    _queryParams.append("email", _item);
                }
            } else {
                _queryParams.append("email", email);
            }
        }

        if (externalRef != null) {
            if (Array.isArray(externalRef)) {
                for (const _item of externalRef) {
                    _queryParams.append("external_ref", _item);
                }
            } else {
                _queryParams.append("external_ref", externalRef);
            }
        }

        if (limit != null) {
            _queryParams.append("limit", limit.toString());
        }

        if (mode != null) {
            _queryParams.append("mode", mode);
        }

        if (modifiedDateAfter != null) {
            _queryParams.append("modified_date.after", modifiedDateAfter);
        }

        if (modifiedDateBefore != null) {
            _queryParams.append("modified_date.before", modifiedDateBefore);
        }

        if (revOrg != null) {
            if (Array.isArray(revOrg)) {
                for (const _item of revOrg) {
                    _queryParams.append("rev_org", _item);
                }
            } else {
                _queryParams.append("rev_org", revOrg);
            }
        }

        if (sortBy != null) {
            if (Array.isArray(sortBy)) {
                for (const _item of sortBy) {
                    _queryParams.append("sort_by", _item);
                }
            } else {
                _queryParams.append("sort_by", sortBy);
            }
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.DevRevBetaEnvironment.Default, "rev-users.list"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.RevUsersListResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.DevRevBetaError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevBetaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevBetaTimeoutError();
            case "unknown":
                throw new errors.DevRevBetaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async unlinkRevUserFromRevOrg(
        request: DevRevBeta.UnlinkRevUserFromRevOrgRequest
    ): Promise<DevRevBeta.UnlinkRevUserFromRevOrgResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.DevRevBetaEnvironment.Default, "rev-users.unlink"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            body: await serializers.UnlinkRevUserFromRevOrgRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.UnlinkRevUserFromRevOrgResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.DevRevBetaError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevBetaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevBetaTimeoutError();
            case "unknown":
                throw new errors.DevRevBetaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async update(request: DevRevBeta.RevUsersUpdateRequest): Promise<DevRevBeta.RevUsersUpdateResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.DevRevBetaEnvironment.Default, "rev-users.update"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
            },
            contentType: "application/json",
            body: await serializers.RevUsersUpdateRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.RevUsersUpdateResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.DevRevBetaError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevBetaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevBetaTimeoutError();
            case "unknown":
                throw new errors.DevRevBetaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader() {
        const value = await core.Supplier.get(this.options.apiKey);
        if (value != null) {
            return value;
        }

        return undefined;
    }
}
