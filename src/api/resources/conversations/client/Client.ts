/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as DevRevBeta from "../../..";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";
import URLSearchParams from "@ungap/url-search-params";

export declare namespace Conversations {
    interface Options {
        environment?: environments.DevRevBetaEnvironment | string;
        apiKey: core.Supplier<string>;
    }
}

export class Conversations {
    constructor(protected readonly options: Conversations.Options) {}

    /**
     * Creates a conversation.
     * @throws {DevRevBeta.BadRequestError}
     * @throws {DevRevBeta.UnauthorizedError}
     * @throws {DevRevBeta.ForbiddenError}
     * @throws {DevRevBeta.TooManyRequestsError}
     * @throws {DevRevBeta.InternalServerError}
     * @throws {DevRevBeta.ServiceUnavailableError}
     */
    public async create(
        request: DevRevBeta.ConversationsCreateRequest
    ): Promise<DevRevBeta.ConversationsCreateResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.DevRevBetaEnvironment.Default,
                "conversations.create"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/devrev-beta",
                "X-Fern-SDK-Version": "beta-0.1",
            },
            contentType: "application/json",
            body: await serializers.ConversationsCreateRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.ConversationsCreateResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRevBeta.BadRequestError(
                        await serializers.ErrorBadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 401:
                    throw new DevRevBeta.UnauthorizedError(
                        await serializers.ErrorUnauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 403:
                    throw new DevRevBeta.ForbiddenError(
                        await serializers.ErrorForbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 429:
                    throw new DevRevBeta.TooManyRequestsError(
                        await serializers.ErrorTooManyRequests.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 500:
                    throw new DevRevBeta.InternalServerError(
                        await serializers.ErrorInternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 503:
                    throw new DevRevBeta.ServiceUnavailableError(
                        await serializers.ErrorServiceUnavailable.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                default:
                    throw new errors.DevRevBetaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevBetaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevBetaTimeoutError();
            case "unknown":
                throw new errors.DevRevBetaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Deletes the requested conversation.
     * @throws {DevRevBeta.BadRequestError}
     * @throws {DevRevBeta.UnauthorizedError}
     * @throws {DevRevBeta.ForbiddenError}
     * @throws {DevRevBeta.NotFoundError}
     * @throws {DevRevBeta.TooManyRequestsError}
     * @throws {DevRevBeta.InternalServerError}
     * @throws {DevRevBeta.ServiceUnavailableError}
     */
    public async delete(
        request: DevRevBeta.ConversationsDeleteRequest
    ): Promise<DevRevBeta.ConversationsDeleteResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.DevRevBetaEnvironment.Default,
                "conversations.delete"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/devrev-beta",
                "X-Fern-SDK-Version": "beta-0.1",
            },
            contentType: "application/json",
            body: await serializers.ConversationsDeleteRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.ConversationsDeleteResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRevBeta.BadRequestError(
                        await serializers.ErrorBadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 401:
                    throw new DevRevBeta.UnauthorizedError(
                        await serializers.ErrorUnauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 403:
                    throw new DevRevBeta.ForbiddenError(
                        await serializers.ErrorForbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 404:
                    throw new DevRevBeta.NotFoundError(
                        await serializers.ErrorNotFound.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 429:
                    throw new DevRevBeta.TooManyRequestsError(
                        await serializers.ErrorTooManyRequests.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 500:
                    throw new DevRevBeta.InternalServerError(
                        await serializers.ErrorInternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 503:
                    throw new DevRevBeta.ServiceUnavailableError(
                        await serializers.ErrorServiceUnavailable.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                default:
                    throw new errors.DevRevBetaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevBetaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevBetaTimeoutError();
            case "unknown":
                throw new errors.DevRevBetaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Exports a collection of conversation items.
     * @throws {DevRevBeta.BadRequestError}
     * @throws {DevRevBeta.UnauthorizedError}
     * @throws {DevRevBeta.ForbiddenError}
     * @throws {DevRevBeta.TooManyRequestsError}
     * @throws {DevRevBeta.InternalServerError}
     * @throws {DevRevBeta.ServiceUnavailableError}
     */
    public async export(
        request: DevRevBeta.ConversationsExportRequest = {}
    ): Promise<DevRevBeta.ConversationsExportResponse> {
        const { appliesToParts, first, group, members, ownedBy, revOrg, sourceChannels, stageName, tags } = request;
        const _queryParams = new URLSearchParams();
        if (appliesToParts != null) {
            if (Array.isArray(appliesToParts)) {
                for (const _item of appliesToParts) {
                    _queryParams.append("applies_to_parts", _item);
                }
            } else {
                _queryParams.append("applies_to_parts", appliesToParts);
            }
        }

        if (first != null) {
            _queryParams.append("first", first.toString());
        }

        if (group != null) {
            if (Array.isArray(group)) {
                for (const _item of group) {
                    _queryParams.append("group", _item);
                }
            } else {
                _queryParams.append("group", group);
            }
        }

        if (members != null) {
            if (Array.isArray(members)) {
                for (const _item of members) {
                    _queryParams.append("members", _item);
                }
            } else {
                _queryParams.append("members", members);
            }
        }

        if (ownedBy != null) {
            if (Array.isArray(ownedBy)) {
                for (const _item of ownedBy) {
                    _queryParams.append("owned_by", _item);
                }
            } else {
                _queryParams.append("owned_by", ownedBy);
            }
        }

        if (revOrg != null) {
            if (Array.isArray(revOrg)) {
                for (const _item of revOrg) {
                    _queryParams.append("rev_org", _item);
                }
            } else {
                _queryParams.append("rev_org", revOrg);
            }
        }

        if (sourceChannels != null) {
            if (Array.isArray(sourceChannels)) {
                for (const _item of sourceChannels) {
                    _queryParams.append("source_channels", _item);
                }
            } else {
                _queryParams.append("source_channels", sourceChannels);
            }
        }

        if (stageName != null) {
            if (Array.isArray(stageName)) {
                for (const _item of stageName) {
                    _queryParams.append("stage.name", _item);
                }
            } else {
                _queryParams.append("stage.name", stageName);
            }
        }

        if (tags != null) {
            if (Array.isArray(tags)) {
                for (const _item of tags) {
                    _queryParams.append("tags", _item);
                }
            } else {
                _queryParams.append("tags", tags);
            }
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.DevRevBetaEnvironment.Default,
                "conversations.export"
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/devrev-beta",
                "X-Fern-SDK-Version": "beta-0.1",
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.ConversationsExportResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRevBeta.BadRequestError(
                        await serializers.ErrorBadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 401:
                    throw new DevRevBeta.UnauthorizedError(
                        await serializers.ErrorUnauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 403:
                    throw new DevRevBeta.ForbiddenError(
                        await serializers.ErrorForbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 429:
                    throw new DevRevBeta.TooManyRequestsError(
                        await serializers.ErrorTooManyRequests.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 500:
                    throw new DevRevBeta.InternalServerError(
                        await serializers.ErrorInternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 503:
                    throw new DevRevBeta.ServiceUnavailableError(
                        await serializers.ErrorServiceUnavailable.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                default:
                    throw new errors.DevRevBetaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevBetaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevBetaTimeoutError();
            case "unknown":
                throw new errors.DevRevBetaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Gets the requested conversation's information.
     * @throws {DevRevBeta.BadRequestError}
     * @throws {DevRevBeta.UnauthorizedError}
     * @throws {DevRevBeta.ForbiddenError}
     * @throws {DevRevBeta.NotFoundError}
     * @throws {DevRevBeta.TooManyRequestsError}
     * @throws {DevRevBeta.InternalServerError}
     * @throws {DevRevBeta.ServiceUnavailableError}
     */
    public async get(request: DevRevBeta.ConversationsGetRequest): Promise<DevRevBeta.ConversationsGetResponse> {
        const { id } = request;
        const _queryParams = new URLSearchParams();
        _queryParams.append("id", id);
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.DevRevBetaEnvironment.Default, "conversations.get"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/devrev-beta",
                "X-Fern-SDK-Version": "beta-0.1",
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.ConversationsGetResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRevBeta.BadRequestError(
                        await serializers.ErrorBadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 401:
                    throw new DevRevBeta.UnauthorizedError(
                        await serializers.ErrorUnauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 403:
                    throw new DevRevBeta.ForbiddenError(
                        await serializers.ErrorForbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 404:
                    throw new DevRevBeta.NotFoundError(
                        await serializers.ErrorNotFound.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 429:
                    throw new DevRevBeta.TooManyRequestsError(
                        await serializers.ErrorTooManyRequests.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 500:
                    throw new DevRevBeta.InternalServerError(
                        await serializers.ErrorInternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 503:
                    throw new DevRevBeta.ServiceUnavailableError(
                        await serializers.ErrorServiceUnavailable.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                default:
                    throw new errors.DevRevBetaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevBetaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevBetaTimeoutError();
            case "unknown":
                throw new errors.DevRevBetaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Lists the available conversations.
     * @throws {DevRevBeta.BadRequestError}
     * @throws {DevRevBeta.UnauthorizedError}
     * @throws {DevRevBeta.ForbiddenError}
     * @throws {DevRevBeta.TooManyRequestsError}
     * @throws {DevRevBeta.InternalServerError}
     * @throws {DevRevBeta.ServiceUnavailableError}
     */
    public async list(
        request: DevRevBeta.ConversationsListRequest = {}
    ): Promise<DevRevBeta.ConversationsListResponse> {
        const {
            appliesToParts,
            cursor,
            group,
            limit,
            members,
            mode,
            ownedBy,
            revOrg,
            sourceChannels,
            stageName,
            tags,
        } = request;
        const _queryParams = new URLSearchParams();
        if (appliesToParts != null) {
            if (Array.isArray(appliesToParts)) {
                for (const _item of appliesToParts) {
                    _queryParams.append("applies_to_parts", _item);
                }
            } else {
                _queryParams.append("applies_to_parts", appliesToParts);
            }
        }

        if (cursor != null) {
            _queryParams.append("cursor", cursor);
        }

        if (group != null) {
            if (Array.isArray(group)) {
                for (const _item of group) {
                    _queryParams.append("group", _item);
                }
            } else {
                _queryParams.append("group", group);
            }
        }

        if (limit != null) {
            _queryParams.append("limit", limit.toString());
        }

        if (members != null) {
            if (Array.isArray(members)) {
                for (const _item of members) {
                    _queryParams.append("members", _item);
                }
            } else {
                _queryParams.append("members", members);
            }
        }

        if (mode != null) {
            _queryParams.append("mode", mode);
        }

        if (ownedBy != null) {
            if (Array.isArray(ownedBy)) {
                for (const _item of ownedBy) {
                    _queryParams.append("owned_by", _item);
                }
            } else {
                _queryParams.append("owned_by", ownedBy);
            }
        }

        if (revOrg != null) {
            if (Array.isArray(revOrg)) {
                for (const _item of revOrg) {
                    _queryParams.append("rev_org", _item);
                }
            } else {
                _queryParams.append("rev_org", revOrg);
            }
        }

        if (sourceChannels != null) {
            if (Array.isArray(sourceChannels)) {
                for (const _item of sourceChannels) {
                    _queryParams.append("source_channels", _item);
                }
            } else {
                _queryParams.append("source_channels", sourceChannels);
            }
        }

        if (stageName != null) {
            if (Array.isArray(stageName)) {
                for (const _item of stageName) {
                    _queryParams.append("stage.name", _item);
                }
            } else {
                _queryParams.append("stage.name", stageName);
            }
        }

        if (tags != null) {
            if (Array.isArray(tags)) {
                for (const _item of tags) {
                    _queryParams.append("tags", _item);
                }
            } else {
                _queryParams.append("tags", tags);
            }
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.DevRevBetaEnvironment.Default, "conversations.list"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/devrev-beta",
                "X-Fern-SDK-Version": "beta-0.1",
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.ConversationsListResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRevBeta.BadRequestError(
                        await serializers.ErrorBadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 401:
                    throw new DevRevBeta.UnauthorizedError(
                        await serializers.ErrorUnauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 403:
                    throw new DevRevBeta.ForbiddenError(
                        await serializers.ErrorForbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 429:
                    throw new DevRevBeta.TooManyRequestsError(
                        await serializers.ErrorTooManyRequests.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 500:
                    throw new DevRevBeta.InternalServerError(
                        await serializers.ErrorInternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 503:
                    throw new DevRevBeta.ServiceUnavailableError(
                        await serializers.ErrorServiceUnavailable.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                default:
                    throw new errors.DevRevBetaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevBetaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevBetaTimeoutError();
            case "unknown":
                throw new errors.DevRevBetaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Updates the requested conversation.
     * @throws {DevRevBeta.BadRequestError}
     * @throws {DevRevBeta.UnauthorizedError}
     * @throws {DevRevBeta.ForbiddenError}
     * @throws {DevRevBeta.NotFoundError}
     * @throws {DevRevBeta.TooManyRequestsError}
     * @throws {DevRevBeta.InternalServerError}
     * @throws {DevRevBeta.ServiceUnavailableError}
     */
    public async update(
        request: DevRevBeta.ConversationsUpdateRequest
    ): Promise<DevRevBeta.ConversationsUpdateResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.DevRevBetaEnvironment.Default,
                "conversations.update"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/devrev-beta",
                "X-Fern-SDK-Version": "beta-0.1",
            },
            contentType: "application/json",
            body: await serializers.ConversationsUpdateRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.ConversationsUpdateResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRevBeta.BadRequestError(
                        await serializers.ErrorBadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 401:
                    throw new DevRevBeta.UnauthorizedError(
                        await serializers.ErrorUnauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 403:
                    throw new DevRevBeta.ForbiddenError(
                        await serializers.ErrorForbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 404:
                    throw new DevRevBeta.NotFoundError(
                        await serializers.ErrorNotFound.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 429:
                    throw new DevRevBeta.TooManyRequestsError(
                        await serializers.ErrorTooManyRequests.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 500:
                    throw new DevRevBeta.InternalServerError(
                        await serializers.ErrorInternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 503:
                    throw new DevRevBeta.ServiceUnavailableError(
                        await serializers.ErrorServiceUnavailable.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                default:
                    throw new errors.DevRevBetaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevBetaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevBetaTimeoutError();
            case "unknown":
                throw new errors.DevRevBetaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader() {
        const value = await core.Supplier.get(this.options.apiKey);
        if (value != null) {
            return value;
        }

        return undefined;
    }
}
