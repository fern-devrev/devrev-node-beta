/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as DevRevBeta from "../../..";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";
import URLSearchParams from "@ungap/url-search-params";

export declare namespace Links {
    interface Options {
        environment?: environments.DevRevBetaEnvironment | string;
        apiKey: core.Supplier<string>;
    }
}

export class Links {
    constructor(protected readonly options: Links.Options) {}

    /**
     * Creates a link between two objects to indicate a relationship.
     *
     * @throws {DevRevBeta.BadRequestError}
     * @throws {DevRevBeta.UnauthorizedError}
     * @throws {DevRevBeta.ForbiddenError}
     * @throws {DevRevBeta.TooManyRequestsError}
     * @throws {DevRevBeta.InternalServerError}
     * @throws {DevRevBeta.ServiceUnavailableError}
     */
    public async create(request: DevRevBeta.LinksCreateRequest): Promise<DevRevBeta.LinksCreateResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.DevRevBetaEnvironment.Default, "links.create"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/devrev-beta",
                "X-Fern-SDK-Version": "beta-0.1",
            },
            contentType: "application/json",
            body: await serializers.LinksCreateRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.LinksCreateResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRevBeta.BadRequestError(
                        await serializers.ErrorBadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 401:
                    throw new DevRevBeta.UnauthorizedError(
                        await serializers.ErrorUnauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 403:
                    throw new DevRevBeta.ForbiddenError(
                        await serializers.ErrorForbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 429:
                    throw new DevRevBeta.TooManyRequestsError(
                        await serializers.ErrorTooManyRequests.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 500:
                    throw new DevRevBeta.InternalServerError(
                        await serializers.ErrorInternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 503:
                    throw new DevRevBeta.ServiceUnavailableError(
                        await serializers.ErrorServiceUnavailable.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                default:
                    throw new errors.DevRevBetaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevBetaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevBetaTimeoutError();
            case "unknown":
                throw new errors.DevRevBetaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Deletes a link.
     * @throws {DevRevBeta.BadRequestError}
     * @throws {DevRevBeta.UnauthorizedError}
     * @throws {DevRevBeta.ForbiddenError}
     * @throws {DevRevBeta.NotFoundError}
     * @throws {DevRevBeta.TooManyRequestsError}
     * @throws {DevRevBeta.InternalServerError}
     * @throws {DevRevBeta.ServiceUnavailableError}
     */
    public async delete(request: DevRevBeta.LinksDeleteRequest): Promise<DevRevBeta.LinksDeleteResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.DevRevBetaEnvironment.Default, "links.delete"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/devrev-beta",
                "X-Fern-SDK-Version": "beta-0.1",
            },
            contentType: "application/json",
            body: await serializers.LinksDeleteRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.LinksDeleteResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRevBeta.BadRequestError(
                        await serializers.ErrorBadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 401:
                    throw new DevRevBeta.UnauthorizedError(
                        await serializers.ErrorUnauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 403:
                    throw new DevRevBeta.ForbiddenError(
                        await serializers.ErrorForbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 404:
                    throw new DevRevBeta.NotFoundError(
                        await serializers.ErrorNotFound.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 429:
                    throw new DevRevBeta.TooManyRequestsError(
                        await serializers.ErrorTooManyRequests.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 500:
                    throw new DevRevBeta.InternalServerError(
                        await serializers.ErrorInternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 503:
                    throw new DevRevBeta.ServiceUnavailableError(
                        await serializers.ErrorServiceUnavailable.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                default:
                    throw new errors.DevRevBetaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevBetaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevBetaTimeoutError();
            case "unknown":
                throw new errors.DevRevBetaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Gets the requested link's information.
     * @throws {DevRevBeta.BadRequestError}
     * @throws {DevRevBeta.UnauthorizedError}
     * @throws {DevRevBeta.ForbiddenError}
     * @throws {DevRevBeta.NotFoundError}
     * @throws {DevRevBeta.TooManyRequestsError}
     * @throws {DevRevBeta.InternalServerError}
     * @throws {DevRevBeta.ServiceUnavailableError}
     */
    public async get(request: DevRevBeta.LinksGetRequest): Promise<DevRevBeta.LinksGetResponse> {
        const { id } = request;
        const _queryParams = new URLSearchParams();
        _queryParams.append("id", id);
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.DevRevBetaEnvironment.Default, "links.get"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/devrev-beta",
                "X-Fern-SDK-Version": "beta-0.1",
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.LinksGetResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRevBeta.BadRequestError(
                        await serializers.ErrorBadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 401:
                    throw new DevRevBeta.UnauthorizedError(
                        await serializers.ErrorUnauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 403:
                    throw new DevRevBeta.ForbiddenError(
                        await serializers.ErrorForbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 404:
                    throw new DevRevBeta.NotFoundError(
                        await serializers.ErrorNotFound.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 429:
                    throw new DevRevBeta.TooManyRequestsError(
                        await serializers.ErrorTooManyRequests.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 500:
                    throw new DevRevBeta.InternalServerError(
                        await serializers.ErrorInternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 503:
                    throw new DevRevBeta.ServiceUnavailableError(
                        await serializers.ErrorServiceUnavailable.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                default:
                    throw new errors.DevRevBetaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevBetaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevBetaTimeoutError();
            case "unknown":
                throw new errors.DevRevBetaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Lists the available links.
     * @throws {DevRevBeta.BadRequestError}
     * @throws {DevRevBeta.UnauthorizedError}
     * @throws {DevRevBeta.ForbiddenError}
     * @throws {DevRevBeta.TooManyRequestsError}
     * @throws {DevRevBeta.InternalServerError}
     * @throws {DevRevBeta.ServiceUnavailableError}
     */
    public async list(request: DevRevBeta.LinksListRequest): Promise<DevRevBeta.LinksListResponse> {
        const { object, cursor, direction, limit, linkType, mode, types } = request;
        const _queryParams = new URLSearchParams();
        _queryParams.append("object", object);
        if (cursor != null) {
            _queryParams.append("cursor", cursor);
        }

        if (direction != null) {
            _queryParams.append("direction", direction);
        }

        if (limit != null) {
            _queryParams.append("limit", limit.toString());
        }

        if (linkType != null) {
            if (Array.isArray(linkType)) {
                for (const _item of linkType) {
                    _queryParams.append("link_type", _item);
                }
            } else {
                _queryParams.append("link_type", linkType);
            }
        }

        if (mode != null) {
            _queryParams.append("mode", mode);
        }

        if (types != null) {
            if (Array.isArray(types)) {
                for (const _item of types) {
                    _queryParams.append("types", _item);
                }
            } else {
                _queryParams.append("types", types);
            }
        }

        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.DevRevBetaEnvironment.Default, "links.list"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern-api/devrev-beta",
                "X-Fern-SDK-Version": "beta-0.1",
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            timeoutMs: 60000,
        });
        if (_response.ok) {
            return await serializers.LinksListResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new DevRevBeta.BadRequestError(
                        await serializers.ErrorBadRequest.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 401:
                    throw new DevRevBeta.UnauthorizedError(
                        await serializers.ErrorUnauthorized.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 403:
                    throw new DevRevBeta.ForbiddenError(
                        await serializers.ErrorForbidden.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 429:
                    throw new DevRevBeta.TooManyRequestsError(
                        await serializers.ErrorTooManyRequests.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 500:
                    throw new DevRevBeta.InternalServerError(
                        await serializers.ErrorInternalServerError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                case 503:
                    throw new DevRevBeta.ServiceUnavailableError(
                        await serializers.ErrorServiceUnavailable.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                        })
                    );
                default:
                    throw new errors.DevRevBetaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.DevRevBetaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.DevRevBetaTimeoutError();
            case "unknown":
                throw new errors.DevRevBetaError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader() {
        const value = await core.Supplier.get(this.options.apiKey);
        if (value != null) {
            return value;
        }

        return undefined;
    }
}
